function [insuredpayoff, mpiportfol, minvalue] = mpiportfolio(A,theta,floor,price)
%***************************%
% General Information. %
%***************************%
% Synopsis:
% mpiportfolio = mpiportfolio(A,theta,floor,price)
% Input:
% A = an mxn payoff matrix, i.e., the matrix whose columns
% are the non-redundant security vectors x1 ,x2 ,...,xn.
% theta = a given portfolio (dimension = nx1).
% floor = the real number that acts as a floor.
% price = an arbitrage-free price vector, i.e., an element of the cone
% generated by the rows of the payoff matrix A (dimension = nx1).
%
% Output:
% mpiportfolio = minimum-premium insurance portfolio. Also, we may ask
% for the insured payoff and minimum value of the problem.
%
%*********************************************************%
% Computation of minimum-premium insurance portfolio by %
% using Algorithm 1 %
%*********************************************************%
[m,n]=size(A);
%***********************************%
% Compute the insured payoff. %
%***********************************%
insuredpayoff= max([A*theta floor*ones(m,1)],[],2);
%***************************************%
% Compute the pseudo-complete markets. %
%***************************************%
combos = nchoosek(1:m,n);
t = length(combos(:,1));
%***********************************************%
% Compute the potentially insuring portfolios. %
%***********************************************%
min_prem_ins_port_matrix = zeros(n,t);
for i = 1:t
Ai = A(combos(i,:),:);
ranki = rank(Ai);
if ranki == n
portfolio = Ai\max([Ai*theta floor*ones(ranki,1)],[],2);
minimum = 1e-7+min(A*portfolio-insuredpayoff);
if minimum >=0
min_prem_ins_port_matrix(:,i) = portfolio;
end
end
end
%***********************************%
% Find the least costly portfolio. %
%***********************************%
[~,j] = find(min_prem_ins_port_matrix);
indices = unique(j)';
cost = price'*min_prem_ins_port_matrix(:,indices);
minvalue = min(cost);
ind1 = eq(cost,minvalue);
ind2 = ind1.*indices;
[~,jj] = find(ind2);
ind3 = ind2(jj);
mpiportfol = min_prem_ins_port_matrix(:,ind3);
minvalue = price'*mpiportfol;
end